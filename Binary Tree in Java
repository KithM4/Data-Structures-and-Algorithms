public class BinaryTreeDemo {
    
    // Node class
    static class Node {
        int data;
        Node left, right;

        public Node(int item) {
            data = item;
            left = right = null;
        }
    }

    // BinaryTree class
    static class BinaryTree {
        Node root;

        // Constructor
        BinaryTree() {
            root = null;
        }

        // Insert a node into the binary tree
        void insert(int data) {
            root = insertRec(root, data);
        }

        // A recursive function to insert a new key in the BST
        Node insertRec(Node root, int data) {
            // If the tree is empty, return a new node
            if (root == null) {
                root = new Node(data);
                return root;
            }

            // Otherwise, recur down the tree
            if (data < root.data) {
                root.left = insertRec(root.left, data);
            } else if (data > root.data) {
                root.right = insertRec(root.right, data);
            }

            // Return the unchanged node pointer
            return root;
        }

        // This method mainly calls inorderRec()
        void inorder() {
            inorderRec(root);
        }

        // A utility function to do inorder traversal of BST
        void inorderRec(Node root) {
            if (root != null) {
                inorderRec(root.left);
                System.out.print(root.data + " ");
                inorderRec(root.right);
            }
        }

        public static void main(String[] args) {
            BinaryTree tree = new BinaryTree();

            /* Let us create the following BST
                      50
                   /     \
                  30      70
                 /  \    /  \
                20   40  60   80
             */
            tree.insert(50);
            tree.insert(30);
            tree.insert(20);
            tree.insert(40);
            tree.insert(70);
            tree.insert(60);
            tree.insert(80);

            // Print inorder traversal of the BST
            System.out.println("Inorder traversal of the BST:");
            tree.inorder();
        }
    }
}
